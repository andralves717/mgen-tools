#! /usr/bin/awk -f

# calculate latency of received packets and print statistics (per flow)
# Copyright (C) 2021 Sebastian Deusser <deusser@fg-networking.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# usage: flow-latency-analyzer [FILE...]
# min, max and average latency for every flow are printed seperately
# the total number of received packets per flow is printed as well
#

# convert MGEN timestamp to seconds
function mgen_ts_to_seconds(ts) {
  split(ts, ts_parts, /:/)
  return 3600 * ts_parts[1] + 60 * ts_parts[2] + ts_parts[3]
}

function abs(v) {return v < 0 ? -v : v}

# put received packet data into variables
$2 ~ /RECV/ {
  recv_time = mgen_ts_to_seconds($1)
  split($4, flow, />/)
  split($5, seq, />/)
  split($8, sent, />/)
  sent_time = mgen_ts_to_seconds(sent[2])

  # keep package count to be independent of reordered packets
  count[flow[2]]++

  # maybe split this into a function with problem handling
  prev_latency[flow[2]] = latency
  latency = recv_time - sent_time
  jitter = abs(latency - prev_latency[flow[2]])

  if (min_latency[flow[2]] == "") {
    min_latency[flow[2]] = latency
  } else if (min_latency[flow[2]] > latency) {
    min_latency[flow[2]] = latency
  }

  if (max_latency[flow[2]] == "") {
    max_latency[flow[2]] = latency
  } else if (max_latency[flow[2]] < latency) {
    max_latency[flow[2]] = latency
  }

  if (min_jitter[flow[2]] == "") {
    min_jitter[flow[2]] = jitter
  } else if (min_jitter[flow[2]] > jitter) {
    min_jitter[flow[2]] = jitter
  }

  if (max_jitter[flow[2]] == "") {
    max_jitter[flow[2]] = jitter
  } else if (max_jitter[flow[2]] < jitter) {
    max_jitter[flow[2]] = jitter
  }

  if (last_flow == ""){
    last_flow = flow[2]
  } else if (last_flow < flow[2]) {
    last_flow = flow[2]
  }

  # keep running average latency
  if (avg_latency[flow[2]] == "") {
    avg_latency[flow[2]] = latency
  } else {
  # new avg latency = (old avg latency * (n-1) + latency) / n
    avg_latency[flow[2]] = (avg_latency[flow[2]] * (count[flow[2]] - 1) + latency) / count[flow[2]]
  }

  if (avg_jitter[flow[2]] == "") {
    avg_jitter[flow[2]] = jitter
  } else {
    avg_jitter[flow[2]] = (avg_jitter[flow[2]] * (count[flow[2]] - 1) + jitter) / count[flow[2]]
  }

  if (flows[flow[2]] == "") {
    min[flow[2]] = seq[2]
    max[flow[2]] = seq[2]
  } else {
    if (seq[2] < min[flow[2]]) {
      min[flow[2]] = seq[2]
    }
    if (seq[2] > max[flow[2]]) {
      max[flow[2]] = seq[2]
    }
  }
  flows[flow[2]]++
}

# print statistics
END {
  for (i in count) {
    printf "flow %d latencies: min. %11.9f, max. %11.9f, avg. %11.9f over %d received packets.\n", i, min_latency[i], max_latency[i], avg_latency[i], count[i];
    printf "flow %d jitter: min. %11.9f, max. %11.9f, avg. %11.9f over %d received packets.\n", i, min_jitter[i], max_jitter[i], avg_jitter[i], count[i];
    
    total_avg_latency += avg_latency[i];
    total_avg_jitter += avg_jitter[i];

  }

  printf "Total Avg Latency: %11.9f s\n", total_avg_latency/last_flow;
  printf "Total Avg Jitter: %11.9f s\n", total_avg_jitter/last_flow; 
  print "--------------------------------------------------------------------------------"
  for (i in flows) {
    # print "received " flows[i] " of " max[i]-min[i]+1 " packets from flow " i " (" (flows[i]*100.)/(max[i]-min[i]+1) "%)"
    received += flows[i]
    total += max[i]-min[i]+1
  }
  print "--------------------------------------------------------------------------------"
  if (total == "") {
    print "no packets received"
  } else {
    print "received " received " of " total " packets from all flows (" received*100.0/total "%)"
    print "lost " total - received " packets (" (total-received)*100.0/total "%)"
  }
  print "--------------------------------------------------------------------------------"
}
