#! /usr/bin/awk -f

# filter mgen output to show reordered packets
# Copyright (C) 2008,2017,2021 Erik Auerswald <auerswald@fg-networking.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# usage: packet-reorder-filter [FILE...]
# print a message for each late or early arriving packet
# duplicated packets are reported as late
# an early packet might mean package loss
# (this is essentially the same as packet-loss-filter)
#
# packets lost after the last received packet are not counted

/RECV/ {
  split($4, flow, />/)
  split($5, seq, />/)
  if (next_packet[flow[2]] == "") {
    next_packet[flow[2]]=seq[2]+1
  } else if (seq[2]>next_packet[flow[2]]) {
    print "packet " seq[2] " of flow " flow[2] " early (at " $1 ")"
    next_packet[flow[2]]=seq[2]+1
  } else if (seq[2]<next_packet[flow[2]]) {
      print "packet " seq[2] " of flow " flow[2] " late  (at " $1 ")"
  } else {
    next_packet[flow[2]]++
  }
}
